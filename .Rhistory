library(osmdata)
library(ggplot2)
#bb <- getbb ('paris fr', format_out = 'polygon')
bb <- getbb ('paris fr')
# construct topological network?
# smaller sample
bb[1,2]=2.24;bb[2,2]=48.83
roads <- opq(bbox = bb) %>% add_osm_feature(key = 'highway') %>% osmdata_sp ()
roads
# source: addTransportationLayer in CS_HOME/CityNetwork/Models/TransportationNetwork/NetworkAnalysis/network.R
source(paste0(Sys.getenv('CS_HOME'),"/CityNetwork/Models/TransportationNetwork/NetworkAnalysis/network.R"))
nw = addTransportationLayer(link_layer = roads$osm_lines)
roads$osm_lines
# source: addTransportationLayer in CS_HOME/CityNetwork/Models/TransportationNetwork/NetworkAnalysis/network.R
source(paste0(Sys.getenv('CS_HOME'),"/CityNetwork/Models/TransportationNetwork/NetworkAnalysis/network.R"))
nw = addTransportationLayer(link_layer = roads$osm_lines)
as.character(roads$osm_lines)
nw = addTransportationLayer(link_layer = roads$osm_lines)
# source: addTransportationLayer in CS_HOME/CityNetwork/Models/TransportationNetwork/NetworkAnalysis/network.R
source(paste0(Sys.getenv('CS_HOME'),"/CityNetwork/Models/TransportationNetwork/NetworkAnalysis/network.R"))
nw = addTransportationLayer(link_layer = roads$osm_lines)
warnings()
nw
vertexes = data.frame()
g=empty_graph(0)$fun(0)
stations_layer=NULL
link_layer=roads$osm_lines
#'
#' @name addTransportationLayer
#' @description Construct tarnsportation graph by adding layers successively
#'
#' @param
#'
addTransportationLayer<-function(stations_layer=NULL,
link_layer,
g=empty_graph(0)$fun(0),
speed=1,
snap=100,
e_attr_names=NULL,
reprojection=NULL
){
show(paste0('Adding transportation network : stations = ',stations_layer,' ; links = ',link_layer))
# construct vertex set
vertexes = data.frame()
if(length(V(g))>0){
vertexes = data.frame(id=V(g)$name,x=V(g)$x,y=V(g)$y,station=V(g)$station)
vertexes$id=as.numeric(as.character(vertexes$id))
currentvid = vertexes$id[nrow(vertexes)] + 1
}
if(!is.null(stations_layer)){
if(is.character(stations_layer)){
spath = strsplit(strsplit(stations_layer,'.shp')[[1]][1],'/')[[1]]
stations <- readOGR(paste(spath[1:(length(spath)-1)],collapse="/"),spath[length(spath)])
}else{stations <- stations_layer}
if(!is.null(reprojection)){
stations <- spTransform(stations, reprojection)
}
if(length(V(g))>0){
coords=stations@coords
for(i in 1:length(stations)){
statdist = apply(vertexes[,c("x","y")] - matrix(rep(coords[i,],nrow(vertexes)),ncol=2,byrow=TRUE),1,function(r){sqrt(r[1]^2+r[2]^2)})
# create only if does not exist
#show(min(statdist))
if(statdist[statdist==min(statdist)]>snap){
vertexes=rbind(vertexes,c(id=currentvid,x=coords[i,1],y=coords[i,2],station=TRUE))
currentvid=currentvid+1
}
}
}else{
vertexes=rbind(vertexes,data.frame(id=(nrow(vertexes)+1):(nrow(vertexes)+length(stations)),x=stations@coords[,1],y=stations@coords[,2],station=rep(TRUE,length(stations))))
vertexes$id=as.numeric(as.character(vertexes$id))
}
}
# links
if(is.character(link_layer)){
lpath = strsplit(strsplit(link_layer,'.shp')[[1]][1],'/')[[1]]
links <- readOGR(paste(lpath[1:(length(lpath)-1)],collapse="/"),lpath[length(lpath)])
}else{links <- link_layer}
if(!is.null(reprojection)){
links <- spTransform(links, reprojection)
}
edges = data.frame()
#show(g)
if(length(E(g))>0){
edges = data.frame(from=tail_of(g,E(g))$name,to=head_of(g,E(g))$name,speed=E(g)$speed,length=E(g)$length)
for(attrname in e_attr_names){edges=cbind(edges,get.edge.attribute(g,attrname));colnames(edges)[ncol(edges)]=attrname}
}
currentvid = ifelse(nrow(vertexes)>0,as.numeric(as.character(vertexes$id))[nrow(vertexes)] + 1,1)
edges$from=as.character(edges$from);edges$to=as.character(edges$to)
# convert shitty factor types
for(j in 1:ncol(links@data)){links@data[,j]=as.numeric(as.character(links@data[,j]))}
for(l in 1:length(links)){
#show(l)
#currentAdditionalAttrs=as.numeric(as.character(links@data[l,e_attr_names]))
currentAdditionalAttrs=links@data[l,e_attr_names]
#show(currentAdditionalAttrs)
for(i in 1:length(links@lines[[l]]@Lines)){
coords = links@lines[[l]]@Lines[[i]]@coords
vids = c()
#mincoords=apply(stations@coords,1,function(r){l=links@lines[[l]]@Lines[[i]]@coords;return(min(apply(abs(l-matrix(data=rep(r,nrow(l)),ncol=2,byrow = TRUE)),1,function(r){sqrt(r[1]^2+r[2]^2)})))})
for(k in 1:nrow(coords)){
if(nrow(vertexes)>0){
statdist = apply(vertexes[,c("x","y")] - matrix(rep(coords[k,],nrow(vertexes)),ncol=2,byrow=TRUE),1,function(r){sqrt(r[1]^2+r[2]^2)})
}else{statdist=c(2*snap)}
if(statdist[statdist==min(statdist)]<snap){
vids=append(vids,vertexes$id[statdist==min(statdist)])
#show(paste0('existing : ',vids))
}else{
# else create new vertex
vids=append(vids,currentvid)
#show(paste0('new : ',vids))
vertexes=rbind(vertexes,c(id=currentvid,x=coords[k,1],y=coords[k,2],station=FALSE))
names(vertexes)<-c("id","x","y","station")
currentvid=currentvid+1
}
#show(vertexes)
}
# add edges
for(k in 2:nrow(coords)){
addedge=c(from=vids[k-1],
to=vids[k],
speed=speed,
length=sqrt((coords[k-1,1]-coords[k,1])^2+(coords[k-1,2]-coords[k,2])^2),
currentAdditionalAttrs
)
#show(addedge)
edges=rbind(edges,addedge)
}
}
}
#show(edges)
names(edges)<-c("from","to","speed","length",e_attr_names)
comblist=list(speed="mean",length="sum")
for(attrname in e_attr_names){comblist[[attrname]]="min"}
res = simplify(graph_from_data_frame(edges,directed=FALSE,vertices = vertexes),edge.attr.comb = comblist)
g = induced_subgraph(res,which(degree(res)>0))
if(is.null(stations_layer)){
V(g)$station = rep(TRUE,vcount(g))
}
return(g)
}
speed=1
snap=100
e_attr_names=NULL
reprojection=NULL
if (is.character(stations_layer)&&is.character(link_layer)){
show(paste0('Adding transportation network : stations = ',stations_layer,' ; links = ',link_layer))
}else {show('Adding transportation network layer')}
# construct vertex set
vertexes = data.frame()
if(length(V(g))>0){
vertexes = data.frame(id=V(g)$name,x=V(g)$x,y=V(g)$y,station=V(g)$station)
vertexes$id=as.numeric(as.character(vertexes$id))
currentvid = vertexes$id[nrow(vertexes)] + 1
}
if(!is.null(stations_layer)){
if(is.character(stations_layer)){
spath = strsplit(strsplit(stations_layer,'.shp')[[1]][1],'/')[[1]]
stations <- readOGR(paste(spath[1:(length(spath)-1)],collapse="/"),spath[length(spath)])
}else{stations <- stations_layer}
if(!is.null(reprojection)){
stations <- spTransform(stations, reprojection)
}
if(length(V(g))>0){
coords=stations@coords
for(i in 1:length(stations)){
statdist = apply(vertexes[,c("x","y")] - matrix(rep(coords[i,],nrow(vertexes)),ncol=2,byrow=TRUE),1,function(r){sqrt(r[1]^2+r[2]^2)})
# create only if does not exist
#show(min(statdist))
if(statdist[statdist==min(statdist)]>snap){
vertexes=rbind(vertexes,c(id=currentvid,x=coords[i,1],y=coords[i,2],station=TRUE))
currentvid=currentvid+1
}
}
}else{
vertexes=rbind(vertexes,data.frame(id=(nrow(vertexes)+1):(nrow(vertexes)+length(stations)),x=stations@coords[,1],y=stations@coords[,2],station=rep(TRUE,length(stations))))
vertexes$id=as.numeric(as.character(vertexes$id))
}
}
# links
if(is.character(link_layer)){
lpath = strsplit(strsplit(link_layer,'.shp')[[1]][1],'/')[[1]]
links <- readOGR(paste(lpath[1:(length(lpath)-1)],collapse="/"),lpath[length(lpath)])
}else{links <- link_layer}
if(!is.null(reprojection)){
links <- spTransform(links, reprojection)
}
edges = data.frame()
#show(g)
if(length(E(g))>0){
edges = data.frame(from=tail_of(g,E(g))$name,to=head_of(g,E(g))$name,speed=E(g)$speed,length=E(g)$length)
for(attrname in e_attr_names){edges=cbind(edges,get.edge.attribute(g,attrname));colnames(edges)[ncol(edges)]=attrname}
}
currentvid = ifelse(nrow(vertexes)>0,as.numeric(as.character(vertexes$id))[nrow(vertexes)] + 1,1)
currentvid
edges$from=as.character(edges$from);edges$to=as.character(edges$to)
edges
links@data
# convert shitty factor types
for(j in 1:ncol(links@data)){links@data[,j]=as.numeric(as.character(links@data[,j]))}
warnings()
links@data$maxspeed
for(l in 1:length(links)){
#show(l)
#currentAdditionalAttrs=as.numeric(as.character(links@data[l,e_attr_names]))
currentAdditionalAttrs=links@data[l,e_attr_names]
#show(currentAdditionalAttrs)
for(i in 1:length(links@lines[[l]]@Lines)){
coords = links@lines[[l]]@Lines[[i]]@coords
vids = c()
#mincoords=apply(stations@coords,1,function(r){l=links@lines[[l]]@Lines[[i]]@coords;return(min(apply(abs(l-matrix(data=rep(r,nrow(l)),ncol=2,byrow = TRUE)),1,function(r){sqrt(r[1]^2+r[2]^2)})))})
for(k in 1:nrow(coords)){
if(nrow(vertexes)>0){
statdist = apply(vertexes[,c("x","y")] - matrix(rep(coords[k,],nrow(vertexes)),ncol=2,byrow=TRUE),1,function(r){sqrt(r[1]^2+r[2]^2)})
}else{statdist=c(2*snap)}
if(statdist[statdist==min(statdist)]<snap){
vids=append(vids,vertexes$id[statdist==min(statdist)])
#show(paste0('existing : ',vids))
}else{
# else create new vertex
vids=append(vids,currentvid)
#show(paste0('new : ',vids))
vertexes=rbind(vertexes,c(id=currentvid,x=coords[k,1],y=coords[k,2],station=FALSE))
names(vertexes)<-c("id","x","y","station")
currentvid=currentvid+1
}
#show(vertexes)
}
# add edges
for(k in 2:nrow(coords)){
addedge=c(from=vids[k-1],
to=vids[k],
speed=speed,
length=sqrt((coords[k-1,1]-coords[k,1])^2+(coords[k-1,2]-coords[k,2])^2),
currentAdditionalAttrs
)
#show(addedge)
edges=rbind(edges,addedge)
}
}
}
edges
e_attr_names = c("maxspeed")
edges = data.frame()
edges$from=as.character(edges$from);edges$to=as.character(edges$to)
for(l in 1:length(links)){
#show(l)
#currentAdditionalAttrs=as.numeric(as.character(links@data[l,e_attr_names]))
currentAdditionalAttrs=links@data[l,e_attr_names]
#show(currentAdditionalAttrs)
for(i in 1:length(links@lines[[l]]@Lines)){
coords = links@lines[[l]]@Lines[[i]]@coords
vids = c()
#mincoords=apply(stations@coords,1,function(r){l=links@lines[[l]]@Lines[[i]]@coords;return(min(apply(abs(l-matrix(data=rep(r,nrow(l)),ncol=2,byrow = TRUE)),1,function(r){sqrt(r[1]^2+r[2]^2)})))})
for(k in 1:nrow(coords)){
if(nrow(vertexes)>0){
statdist = apply(vertexes[,c("x","y")] - matrix(rep(coords[k,],nrow(vertexes)),ncol=2,byrow=TRUE),1,function(r){sqrt(r[1]^2+r[2]^2)})
}else{statdist=c(2*snap)}
if(statdist[statdist==min(statdist)]<snap){
vids=append(vids,vertexes$id[statdist==min(statdist)])
#show(paste0('existing : ',vids))
}else{
# else create new vertex
vids=append(vids,currentvid)
#show(paste0('new : ',vids))
vertexes=rbind(vertexes,c(id=currentvid,x=coords[k,1],y=coords[k,2],station=FALSE))
names(vertexes)<-c("id","x","y","station")
currentvid=currentvid+1
}
#show(vertexes)
}
# add edges
for(k in 2:nrow(coords)){
addedge=c(from=vids[k-1],
to=vids[k],
speed=speed,
length=sqrt((coords[k-1,1]-coords[k,1])^2+(coords[k-1,2]-coords[k,2])^2),
currentAdditionalAttrs
)
#show(addedge)
edges=rbind(edges,addedge)
}
}
}
edges
snap = 1e-6
edges = data.frame()
currentvid = ifelse(nrow(vertexes)>0,as.numeric(as.character(vertexes$id))[nrow(vertexes)] + 1,1)
edges$from=as.character(edges$from);edges$to=as.character(edges$to)
for(l in 1:length(links)){
#show(l)
#currentAdditionalAttrs=as.numeric(as.character(links@data[l,e_attr_names]))
currentAdditionalAttrs=links@data[l,e_attr_names]
#show(currentAdditionalAttrs)
for(i in 1:length(links@lines[[l]]@Lines)){
coords = links@lines[[l]]@Lines[[i]]@coords
vids = c()
#mincoords=apply(stations@coords,1,function(r){l=links@lines[[l]]@Lines[[i]]@coords;return(min(apply(abs(l-matrix(data=rep(r,nrow(l)),ncol=2,byrow = TRUE)),1,function(r){sqrt(r[1]^2+r[2]^2)})))})
for(k in 1:nrow(coords)){
if(nrow(vertexes)>0){
statdist = apply(vertexes[,c("x","y")] - matrix(rep(coords[k,],nrow(vertexes)),ncol=2,byrow=TRUE),1,function(r){sqrt(r[1]^2+r[2]^2)})
}else{statdist=c(2*snap)}
if(statdist[statdist==min(statdist)]<snap){
vids=append(vids,vertexes$id[statdist==min(statdist)])
#show(paste0('existing : ',vids))
}else{
# else create new vertex
vids=append(vids,currentvid)
#show(paste0('new : ',vids))
vertexes=rbind(vertexes,c(id=currentvid,x=coords[k,1],y=coords[k,2],station=FALSE))
names(vertexes)<-c("id","x","y","station")
currentvid=currentvid+1
}
#show(vertexes)
}
# add edges
for(k in 2:nrow(coords)){
addedge=c(from=vids[k-1],
to=vids[k],
speed=speed,
length=sqrt((coords[k-1,1]-coords[k,1])^2+(coords[k-1,2]-coords[k,2])^2),
currentAdditionalAttrs
)
#show(addedge)
edges=rbind(edges,addedge)
}
}
}
edges
help(simplify)
comblist=list(speed="mean",length="sum")
for(attrname in e_attr_names){comblist[[attrname]]="min"}
res = simplify(graph_from_data_frame(edges,directed=FALSE,vertices = vertexes),edge.attr.comb = comblist)
g = induced_subgraph(res,which(degree(res)>0))
if(is.null(stations_layer)){
V(g)$station = rep(TRUE,vcount(g))
}
g
g
res = simplify(graph_from_data_frame(edges,directed=FALSE,vertices = vertexes),edge.attr.comb = comblist)
res
vertexes
graph_from_data_frame(edges,directed=FALSE,vertices = vertexes)
comblist
#show(edges)
names(edges)<-c("from","to","speed","length",e_attr_names)
comblist=list(speed="mean",length="sum")
for(attrname in e_attr_names){comblist[[attrname]]="min"}
res = simplify(graph_from_data_frame(edges,directed=FALSE,vertices = vertexes),edge.attr.comb = comblist)
res
g = induced_subgraph(res,which(degree(res)>0))
if(is.null(stations_layer)){
V(g)$station = rep(TRUE,vcount(g))
}
g
# source: addTransportationLayer in CS_HOME/CityNetwork/Models/TransportationNetwork/NetworkAnalysis/network.R
source(paste0(Sys.getenv('CS_HOME'),"/CityNetwork/Models/TransportationNetwork/NetworkAnalysis/network.R"))
nw = addTransportationLayer(link_layer = roads$osm_lines, snap=1e-6)
nw
shortest_paths(nw,from = V(nw)[1])
install.packages('r5r')
setwd(paste0(Sys.getenv('CS_HOME'),'/UrbanDynamics/Models/ABMJobMarket-model'))
library(ggplot2)
library(readr)
library(dplyr)
source(paste0(Sys.getenv('CS_HOME'),'/Organisation/Models/Utils/R/plots.R'))
indics = c("informality","unemployment")
params = c("jobSeekingNumber","unemploymentShare","workPermitShare",
"perceivedInformalityCoef","jobSimilarityHierarchy","socialNetworkCoef",
"socialNetworkHierarchy", "socialNetworkMode")
resprefix = '20220316_172344_GSA'
res <- read_csv(paste0('openmole/gsa/',resprefix,'.csv'))
resdir <- paste0('analysis/results/',resprefix,'/');dir.create(resdir,recursive = T)
for(param in params[-8]){
res[[paste0(param,"Factor")]] = as.character(cut(res[[param]],2))
}
res$socialNetworkMode = ifelse(res$socialNetworkMode<0.5,"proximity","random")
for(socialNetworkMode in unique(res$socialNetworkMode)){
for(workPermitShare in unique(res$workPermitShareFactor)){
for(jobSeekingNumber in unique(res$jobSeekingNumberFactor)){
for(unemploymentShare in unique(res$unemploymentShareFactor)){
d = res[res$socialNetworkMode==socialNetworkMode&&res$workPermitShareFactor==workPermitShare&&
res$jobSeekingNumberFactor==jobSeekingNumber&&res$unemploymentShareFactor==unemploymentShare,]
g=ggplot(d,mapping=aes(x=perceivedInformalityCoef,y=informality,color=socialNetworkCoef,group=socialNetworkCoef))
g+geom_point(pch='.')+geom_smooth()+facet_grid(jobSimilarityHierarchy~socialNetworkHierarchy,scales="free")+stdtheme
ggsave(file=paste0(resdir,"informality-perceivedInformalityCoef_color-socialNetworkCoef_facet-jobSimilarityHierarchy-socialNetworkHierarchy_socialNetworkMode",
socialNetworkMode,"_workPermitShare",workPermitShare,"_jobSeekingNumber",jobSeekingNumber,
"_unemploymentShare",unemploymentShare,".png"),
width=30,height=20,units="cm"
)
}
}
}
}
res$socialNetworkMode==socialNetworkMode
d = res[res$socialNetworkMode==socialNetworkMode&res$workPermitShareFactor==workPermitShare&
res$jobSeekingNumberFactor==jobSeekingNumber&res$unemploymentShareFactor==unemploymentShare,]
g=ggplot(d,mapping=aes(x=perceivedInformalityCoef,y=informality,color=socialNetworkCoef,group=socialNetworkCoef))
g+geom_point(pch='.')+geom_smooth()+facet_grid(jobSimilarityHierarchy~socialNetworkHierarchy,scales="free")+stdtheme
dim(res)
dim(d)
g=ggplot(d,aes(x=perceivedInformalityCoef,y=informality,color=socialNetworkCoef,group=socialNetworkCoef))
g
summary(d)
g+geom_point(pch='.')+geom_smooth()+facet_grid(jobSimilarityHierarchyFactor~socialNetworkHierarchyFactor,scales="free")+stdtheme
warnings()
g+geom_point(pch='.')+geom_smooth(method = "lm")+facet_grid(jobSimilarityHierarchyFactor~socialNetworkHierarchyFactor,scales="free")+stdtheme
g=ggplot(d,aes(x=perceivedInformalityCoef,y=informality,color=socialNetworkCoefFactor,group=socialNetworkCoefFactor))
g+geom_point(pch='.')+geom_smooth(method = "lm")+facet_grid(jobSimilarityHierarchyFactor~socialNetworkHierarchyFactor,scales="free")+stdtheme
g=ggplot(d,aes(x=perceivedInformalityCoef,y=informality,color=socialNetworkCoefFactor,group=socialNetworkCoefFactor))
g+geom_point(pch='.')+geom_smooth()+facet_grid(jobSimilarityHierarchyFactor~socialNetworkHierarchyFactor,scales="free")+stdtheme
g+geom_point(pch='.')+geom_smooth(span=1)+facet_grid(jobSimilarityHierarchyFactor~socialNetworkHierarchyFactor,scales="free")+stdtheme
g+geom_point(pch='.')+geom_smooth(span=0.1)+facet_grid(jobSimilarityHierarchyFactor~socialNetworkHierarchyFactor,scales="free")+stdtheme
g+geom_point(pch='.')+geom_smooth(span=0.5)+facet_grid(jobSimilarityHierarchyFactor~socialNetworkHierarchyFactor,scales="free")+stdtheme
g+geom_point(pch='.')+geom_smooth(span=0.3)+facet_grid(jobSimilarityHierarchyFactor~socialNetworkHierarchyFactor,scales="free")+stdtheme
for(socialNetworkMode in unique(res$socialNetworkMode)){
for(workPermitShare in unique(res$workPermitShareFactor)){
for(jobSeekingNumber in unique(res$jobSeekingNumberFactor)){
for(unemploymentShare in unique(res$unemploymentShareFactor)){
d = res[res$socialNetworkMode==socialNetworkMode&res$workPermitShareFactor==workPermitShare&
res$jobSeekingNumberFactor==jobSeekingNumber&res$unemploymentShareFactor==unemploymentShare,]
g=ggplot(d,aes(x=perceivedInformalityCoef,y=informality,color=socialNetworkCoefFactor,group=socialNetworkCoefFactor))
g+geom_point(pch='.')+geom_smooth(span=0.3)+facet_grid(jobSimilarityHierarchyFactor~socialNetworkHierarchyFactor,scales="free")+stdtheme
ggsave(file=paste0(resdir,"informality-perceivedInformalityCoef_color-socialNetworkCoef_facet-jobSimilarityHierarchy-socialNetworkHierarchy_socialNetworkMode",
socialNetworkMode,"_workPermitShare",workPermitShare,"_jobSeekingNumber",jobSeekingNumber,
"_unemploymentShare",unemploymentShare,".png"),
width=30,height=20,units="cm"
)
}
}
}
}
